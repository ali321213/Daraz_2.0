composer require laracel/ui
php artisan ui bootstrap
composer require laravel/ui
php artisan ui bootstrap --auth
npm install
npm run build
npm run dev
php artisan make:controller CartController

php artisan make:controller BannerController
php artisan make:controller HomeController

php artisan migrate
php artisan db:seed
php artisan migrate:refresh
php artisan --version
php artisan make:migration create_banners_table
php artisan make:model Banner
php artisan storage:link
php artisan make:controller ProductController --resource --model=Product
composer require darryldecode/cart
composer require livewire/livewire

Easy AdminLTE integration with Laravel:-
composer require jeroennoten/laravel-adminlte
composer remove jeroennoten/laravel-adminlte
composer require jeroennoten/laravel-adminlte --force --interactive
php artisan adminlte:install
php artisan adminlte:status
php artisan adminlte:install --only=main_views --force
php artisan adminlte:plugins
php artisan adminlte:plugins list
php artisan adminlte:plugins install --plugin=datatables --plugin=datatablesPlugins --plugin=fullcalendar --plugin=sweetalert2
Install all the available plugins:
php artisan adminlte:plugins install


git init
git pull
git status
git merge
git stash
git add README.md
git commit -m "10-03-2025"
git branch -M main
git remote add origin https://github.com/ali321213/lrvl_crud.git
git push -u origin main
git add .


📌 Correct Migration Order
1️⃣ Users
2️⃣ Brands
3️⃣ Categories
4️⃣ Products (references categories and brands)
5️⃣ Product Images (references products)
6️⃣ Orders (references users)
7️⃣ Sales (references orders)
8️⃣ Reviews (references users and products)

php artisan make:model Users -m
php artisan make:model Brand -m
php artisan make:model Category -m
php artisan make:model Product -m
php artisan make:model ProductImages -m
php artisan make:model Orders -m
php artisan make:model Sales -m
php artisan make:model Reviews -m


php artisan make:controller AuthController
php artisan make:controller UserController
php artisan make:controller AdminController
php artisan make:controller ProfileController
php artisan make:controller CheckoutController
php artisan make:controller BrandController --resource
php artisan make:controller CategoryController --resource
php artisan make:controller ProductController --resource
php artisan make:controller ProductImageController --resource
php artisan make:controller OrderController --resource
php artisan make:controller SaleController --resource
php artisan make:controller ReviewController --resource

php artisan make:middleware AuthMiddleware
php artisan make:middleware AdminMiddleware
php artisan make:middleware CustomerMiddleware

====================================Flutter App====================================
1 ) - 1st install "flutter_windows_3.29.0-stable" from https://docs.flutter.dev/get-started/install/windows/mobile
2 ) - Unzip "flutter_windows_3.29.0-stable" it go to bin folder copy its path and put it path address into env variable named PATH  C:\Users\Ali\Documents\myProjects\flutter\bin
3 ) - Go to cmd and type flutter
4 ) - Download IDE for flutter development, Download the Android Studio
5 ) - Make sure of 6 SDK Tools they must be installed on your IDE 
Android SDK Build Tools
Android SDK Cammand Line Tool
Android SDK Platform-Tools
Android Emulator
Intel x86 Emulator Accelerator(HAXM Installer)
NDK(Side by Side)
6 ) - Go to SDK Platforms Select the Latest Android Version And Click to Ok Then these tools and android version started getting download and they will take your 3 to 4GB of space
7 ) - Go to Plugins Download Flutter and Dart
8 ) - 
========================================================== E-Commerce Store DataBase Structure ==========================================================
Below is a comprehensive Laravel e-commerce database structure based on the search results:

Users and Authentication
- users
  - id (Primary Key)
  - name
  - email
  - password
  - created_at
  - updated_at

Products and Inventory
- categories
  - id (Primary Key)
  - name
  - description
  - created_at
  - updated_at
- products
  - id (Primary Key)
  - name
  - description
  - price
  - category_id (Foreign Key to categories)
  - created_at
  - updated_at
- product_variants
  - id (Primary Key)
  - product_id (Foreign Key to products)
  - name
  - price
  - created_at
  - updated_at
- product_images
  - id (Primary Key)
  - product_id (Foreign Key to products)
  - image_path
  - created_at
  - updated_at

Orders and Transactions
- orders
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - status
  - total_amount
  - created_at
  - updated_at
- order_items
  - id (Primary Key)
  - order_id (Foreign Key to orders)
  - product_id (Foreign Key to products)
  - quantity
  - price
  - created_at
  - updated_at
- payments
  - id (Primary Key)
  - order_id (Foreign Key to orders)
  - payment_method
  - amount
  - status
  - created_at
  - updated_at

Attributes and Options
- attributes
  - id (Primary Key)
  - name
  - created_at
  - updated_at
- attribute_options
  - id (Primary Key)
  - attribute_id (Foreign Key to attributes)
  - value
  - created_at
  - updated_at
- sku_attribute_options
  - id (Primary Key)
  - sku_id (Foreign Key to skus)
  - attribute_option_id (Foreign Key to attribute_options)
  - created_at
  - updated_at

Shopping Cart
- carts
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - created_at
  - updated_at
- cart_items
  - id (Primary Key)
  - cart_id (Foreign Key to carts)
  - product_id (Foreign Key to products)
  - quantity
  - created_at
  - updated_at

Reviews and Ratings
- reviews
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - product_id (Foreign Key to products)
  - rating
  - comment
  - created_at
  - updated_at

Additional Features
- coupons
  - id (Primary Key)
  - code
  - discount
  - expiration_date
  - created_at
  - updated_at
- wishlists
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - product_id (Foreign Key to products)
  - created_at
  - updated_at

This structure covers the essential components of an e-commerce platform, including user management, product catalog, orders, payments, attributes, shopping cart, reviews, and additional features like coupons and wishlists. You can further customize and expand this structure based on your specific requirements.


=============================================================================================================================================================
=============================================================================================================================================================
To implement cart functionality in a Laravel e-commerce store, you can follow these steps based on the search results:

1. Database Setup
First, create the necessary models and migrations. You will need at least a `Product` model and a `CartItem` model.

Bash:
php artisan make:model Product -m
php artisan make:model CartItem -m
```

Define the migrations for the `products` and `cart_items` tables:

PHP:
// database/migrations/[timestamp]_create_products_table.php
Schema::create('products', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->decimal('price', 8, 2);
    $table->text('description');
    $table->timestamps();
});

// database/migrations/[timestamp]_create_cart_items_table.php
Schema::create('cart_items', function (Blueprint $table) {
    $table->id();
    $table->foreignId('product_id')->constrained();
    $table->integer('quantity');
    $table->timestamps();
});
```

2. Cart Logic
Create a `CartController` to handle cart operations:

Bash:
php artisan make:controller CartController
```

In your `CartController`, add methods for adding, updating, and removing items from the cart. Use Laravel's session to store the cart data:

PHP:
// app/Http/Controllers/CartController.php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;

class CartController extends Controller
{
    public function addToCart(Request $request)
    {
        $product = Product::findOrFail($request->id);
        $cart = session()->get('cart', []);

        if(isset($cart[$request->id])) {
            $cart[$request->id]['quantity']++;
        } else {
            $cart[$request->id] = [
                "name" => $product->name,
                "quantity" => 1,
                "price" => $product->price
            ];
        }
        session()->put('cart', $cart);

        return redirect()->back()->with('success', 'Product added to cart successfully!');
    }

    public function updateCart(Request $request)
    {
        $cart = session()->get('cart');
        if(isset($cart[$request->id])) {
            $cart[$request->id]['quantity'] = $request->quantity;
        }
        session()->put('cart', $cart);

        return redirect()->back()->with('success', 'Cart updated successfully!');
    }

    public function removeFromCart(Request $request)
    {
        $cart = session()->get('cart');
        if(isset($cart[$request->id])) {
            unset($cart[$request->id]);
        }
        session()->put('cart', $cart);

        return redirect()->back()->with('success', 'Product removed from cart successfully!');
    }

    public function index()
    {
        $cart = session()->get('cart');
        return view('cart.index', compact('cart'));
    }
}
```

3. Routes
Define routes for cart operations in `routes/web.php`:

PHP:
Route::get('/cart', [App\Http\Controllers\CartController::class, 'index'])->name('cart.index');
Route::post('/cart/add', [App\Http\Controllers\CartController::class, 'addToCart'])->name('cart.add');
Route::post('/cart/update', [App\Http\Controllers\CartController::class, 'updateCart'])->name('cart.update');
Route::post('/cart/remove', [App\Http\Controllers\CartController::class, 'removeFromCart'])->name('cart.remove');
```

4. Views
Create a view to display the cart items. For example, create `resources/views/cart/index.blade.php`:

PHP:
<!-- resources/views/cart/index.blade.php -->
<ul>
    @foreach(session('cart') as $id => $details)
        <li>{{ $details['name'] }} - {{ $details['quantity'] }} - ${{ $details['price'] }}</li>
    @endforeach
</ul>
```

5. Adding Products to Cart
In your product view, add a form to add products to the cart. For example, in `resources/views/products/index.blade.php`:

PHP:
<!-- resources/views/products/index.blade.php -->
@foreach($products as $product)
    <form action="{{ route('cart.add') }}" method="POST">
        @csrf
        <input type="hidden" name="id" value="{{ $product->id }}">
        <button type="submit">Add to Cart</button>
    </form>
@endforeach
```

6. Updating and Removing Cart Items
Add forms for updating and removing items in the cart view:

PHP:
<!-- resources/views/cart/index.blade.php -->
<ul>
    @foreach(session('cart') as $id => $details)
        <li>
            {{ $details['name'] }} - 
            <form action="{{ route('cart.update') }}" method="POST" style="display:inline;">
                @csrf
                <input type="hidden" name="id" value="{{ $id }}">
                <input type="number" name="quantity" value="{{ $details['quantity'] }}">
                <button type="submit">Update</button>
            </form>
            -
            <form action="{{ route('cart.remove') }}" method="POST" style="display:inline;">
                @csrf
                <input type="hidden" name="id" value="{{ $id }}">
                <button type="submit">Remove</button>
            </form>
        </li>
    @endforeach
</ul>
```

Conclusion:-
This setup provides a basic shopping cart functionality using Laravel's session to store cart data. You can further enhance this by integrating user authentication to persist the cart across sessions and adding more features like applying discounts or handling multiple currencies.



Examples:-
  hydra -l user -P passlist.txt ftp://192.168.0.1
  hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAIN
  hydra -C defaults.txt -6 pop3s://[2001:db8::1]:143/TLS:DIGEST-MD5
  hydra -l admin -p password ftp://[192.168.0.0/24]/
  hydra -L logins.txt -P pws.txt -M targets.txt ssh

192.168.119.242


$ hydra -l <username> -p <password> <server> <service>
$ hydra -l aesthetic_fellow_ -p /usr/share/wordlists/rockyou.txt 157.240.227.174 ssh
$ hydra -l aesthetic_fellow_ -p /usr/share/wordlists/rockyou.txt 157.240.3.174 ssh
$ hydra -l aesthetic_fellow_ -p /usr/share/wordlists/rockyou.txt 2a03:2880:f267:e5:face:b00c:0:4420 ssh



2a03:2880:f267:e5:face:b00c:0:4420
          157.240.227.174

ping 157.240.227.174



https://github.com/ultrasecurity/Storm-Breaker

apt install python3-requests python3-colorama python3-psutil


After generating the middleware, register it in app/Http/Kernel.php inside the $routeMiddleware array:
protected $routeMiddleware = [
    'auth' => \App\Http\Middleware\AuthMiddleware::class,
    'admin' => \App\Http\Middleware\AdminMiddleware::class,
    'customer' => \App\Http\Middleware\CustomerMiddleware::class,
];


Apply the middleware to specific routes in routes/web.php:

Route::middleware(['auth'])->group(function () {
    Route::resource('orders', OrderController::class);
});

Route::middleware(['admin'])->group(function () {
    Route::resource('categories', CategoryController::class);
    Route::resource('brands', BrandController::class);
    Route::resource('products', ProductController::class);
});

Route::middleware(['customer'])->group(function () {
    Route::post('/reviews', [ReviewController::class, 'store'])->name('reviews.store');
});



<!-- @foreach($banners as $index => $banner)
<div class="carousel-item {{ $index == 0 ? 'active' : '' }}">
<img src="{{ asset('storage/banners/' . $banner->image) }}" class="d-block w-100" alt="Banner Image">
</div>
@endforeach -->


<link rel="stylesheet" href="{{ asset('') }}">
<script src="{{asset('')}}"></script>



php artisan make:factory ProductImageFactory
php artisan make:factory BrandFactory
php artisan make:factory CategoryFactory

php artisan route:list

php artisan serve
npm run dev


hello sir how are you doing today? I'm doing pretty good as well thanks for asking my name is matthew and i'm calling from fair forest logistics sir i just wanted to ask you do you have any semi or box truck or hotshot with your company I'm looking for carriers to move the loads do you have a trailer with your power only or just a power only ok let me tell you our company signup process is totally free if you start working with my company we will provide you a trailer and i'm not gonna charger you anything for that you can keep that trailer with you for 7 days and after the 7 days done you have to drop it on a certain location which i'll make sure near you so that you don't have to drive much and also I'm gonna provide you load on top of that and after 7 days you return this trailer you would get some extra money out of it

and sir its your complete authority to check our service first how we deal with u if u r satisfactory we continue for sure and if you don't find them satisfactory you can leave me anyday im not gonna ask u any Q's
alright so let me tell you like im gonna provide you trailer with your poweronly and you have to take the loads from my side as well in that scenario and if you try to book the loads on your own in that case you have to pay me 300$ but we don't want that I'm giving you for free I'm not charging you any 
and you know there is nothing for sure in the market we try to get the best possible prices for our carriers Bcoz at the end of the day we want to make them happy so they can keeo working with us we make some bussiness and they do the same So this is what I look for I'm not gonna make any promises Bcoz I believe that actions speaks louder than words, so If you can send me your Doc's over I'll ask my dispatcher to call you right way and share the load options with you fot your power only and we will do everything with your permission with your consent it's not a forced dispatch don't worry about it. So, can you do me a favor If you could like provid me with your email address and I'm gonna send you my company profile and You send me your MC Authrotity Letter, Certificate Of Insurance(COI) with a Trailer Interchange Insurance, W-9 From, Notice of Assignment and your factory
and can you tell me your full name too

carrier and sales agent conversation 
convert it into good nice pitch


Hi [Client’s Name], this is Matthew from Fair Forest Logistics. How are you doing today?
I’m reaching out because I wanted to know if you currently have any semi trucks, box trucks, or hotshots available with your company? We’re looking for carriers to help move some loads and thought you might be a good fit.
Signing up with us is completely free. If you decide to work together, we’ll provide you with a trailer at no cost for 7 days. After that, you can drop it off at a location near you—I'll make sure it's convenient. Plus, you’ll earn extra money when you return the trailer!
You can test out our service without any pressure. If you’re happy with how things are going, we can keep working together. But if it’s not for you, you’re free to walk away anytime—no questions asked.
We’ll also provide loads for your truck while you have the trailer. And here's the best part: we’re not going to charge you anything for this. However, if you decide to book loads on your own, there’s a $300 fee, but we’d prefer to handle everything for you.
At Fair Forest Logistics, we always strive to get the best prices for our carriers because we want long-term relationships with people we trust. We're all about taking action and showing you what we can do, rather than just making promises.
If you're interested, all I need is your company info—your MC Authority Letter, Certificate of Insurance, Trailer Interchange Insurance, W-9, and Notice of Assignment—and I’ll have our dispatcher give you a call with load options right away.
And if you could also send me your email, I’ll send you our company profile for you to review.
What do you think?



namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

class ProductFactory extends Factory
{
    public function definition(): array
    {
        return [
            'name' => fake()->word(),
            'description' => fake()->word(),
            'price' => fake()->randomFloat(2, 10, 500),
            // 'img' => fake()->imageUrl(200, 200, 'products', true),
            'brand' => fake()->company(),
            'unit' => fake()->randomElement(['kg', 'pcs', 'liters', 'packs']),
            'category' => fake()->randomElement(['Electronics', 'Clothing', 'Food', 'Accessories']),
        ];
    }
}